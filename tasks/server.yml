---
- name: Include variable overrides
  ansible.builtin.set_fact:
    _librenms_packages: "{{ librenms_package | default(librenms_packages_default | sorted_get(overrides)) }}"
    _librenms_mysql_packages: "{{ librenms_mysql_packages | default(librenms_mysql_packages_default | sorted_get(overrides)) }}"
    _librenms_php_version: "{{ librenms_php_version | default(librenms_php_version_default | sorted_get(overrides)) }}"
    _librenms_mysql_config_path: "{{ librenms_mysql_config_path | default(librenms_mysql_config_path_default | sorted_get(overrides)) }}"
  vars:
    overrides:
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
      - "{{ ansible_distribution | lower }}"
      - "{{ ansible_os_family | lower }}"
      - "default"

- name: Php version validation
  ansible.builtin.fail:
    msg: "PHP version 8.1.x is the minimun supported version."
  when: _librenms_php_version is version('8.1', operator='lt')

- name: Set php packages
  ansible.builtin.set_fact:
    _librenms_php_packages: "{{ librenms_php_packages | default(librenms_php_packages_default | sorted_get(overrides)) }}"
    _librenms_php_ini_timezone: "{{ librenms_php_ini_timezone | default(librenms_php_ini_timezone_default | sorted_get(overrides)) }}"
  vars:
    overrides:
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
      - "{{ ansible_distribution | lower }}"
      - "{{ ansible_os_family | lower }}"
      - "default"

- name: Inspect packages
  ansible.builtin.package_facts:
    manager: auto

- name: Install nfs
  ansible.builtin.include_role:
    name: nephelaiio.nfs
  vars:
    nfs_server: false
  when: librenms_backup_enable

- name: Install mysql
  ansible.builtin.include_role:
    name: geerlingguy.mysql
  vars:
    mysql_packages: "{{ _librenms_mysql_packages }}"
    mysql_databases:
      - name: "{{ librenms_db_name }}"
        collation: utf8mb4_unicode_ci
        encoding: utf8mb4
    mysql_users:
      - name: "{{ librenms_db_user }}"
        password: "{{ librenms_db_pass }}"
        priv: "{{ librenms_db_name }}.*:ALL"

- name: Disable mysql strict mode
  ansible.builtin.lineinfile:
    path: "{{ _librenms_mysql_config_path }}"
    insertafter: '\[mysqld\]'
    regexp: '^#?{{ item | split("=") | first }} *='
    line: "{{ item }}"
  with_items:
    - 'lower_case_table_names=0'
    - 'innodb_file_per_table=1'
  notify: Restart mysql

- name: Flush_handlers
  ansible.builtin.meta: flush_handlers

- name: Include geerlingguy.php-versions role
  ansible.builtin.include_role:
    name: geerlingguy.php-versions
  vars:
    php_version: "{{ _librenms_php_version }}"
    php_packages: "{{ _librenms_php_packages }}"

- name: Install php
  ansible.builtin.include_role:
    name: geerlingguy.php
  vars:
    php_enable_webserver: false
    php_use_managed_ini: "{{ librenms_php_use_managed_ini }}"
    php_packages: "{{ _librenms_php_packages }}"

- name: Set php timezone
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    regexp: ';?date.timezone\s*='
    line: "date.timezone = {{ librenms_php_timezone }}"
  loop: "{{ _librenms_php_ini_timezone }}"
  notify:
    - Restart fpm

- name: Enable php mcrypt
  ansible.builtin.command: phpenmod mcrypt
  changed_when: false
  when: (ansible_os_family | lower == 'debian')

- name: Start fpm
  ansible.builtin.service:
    name: "php{{ _librenms_php_version }}-fpm"
    state: started
    enabled: true

- name: Install librenms packages
  ansible.builtin.package:
    name: "{{ _librenms_packages }}"

- name: Install nginx
  ansible.builtin.include_role:
    name: geerlingguy.nginx
  vars:
    nginx_remove_default_vhost: true
    nginx_vhosts: "{{ librenms_nginx_vhosts }}"
    nginx_user: "{{ librenms_nginx_user }}"
    nginx_group: "{{ librenms_nginx_group }}"
    nginx_conf_dir: "{{ librenms_nginx_conf_dir }}"
    nginx_certificate_hostname: "{{ librenms_nginx_certificate_hostname }}"
    nginx_certificate_chainfile: "{{ librenms_nginx_certificate_chainfile }}"
    nginx_certificate_keyfile: "{{ librenms_nginx_certificate_keyfile }}"
  when: librenms_nginx_install

- name: Create librenms group
  ansible.builtin.group:
    name: "{{ librenms_group }}"

- name: Manage librenms group memberships
  ansible.builtin.user:
    append: true
    name: "{{ librenms_nginx_user }}"
    groups: "{{ librenms_group }}"
  notify:
    - Restart fpm
    - Restart nginx

- name: Create librenms user
  ansible.builtin.user:
    name: "{{ librenms_user }}"
    group: "{{ librenms_group }}"
    groups: "{{ librenms_nginx_group }}"
    system: true

- name: Create librenms root folder
  ansible.builtin.file:
    path: "{{ librenms_root }}"
    owner: "{{ librenms_user }}"
    group: "{{ librenms_group }}"
    state: directory
    mode: "0770"
  changed_when: false

- name: Retrieve safe directory list from git config
  ansible.builtin.command: git config --get-all safe.directory  # noqa command-instead-of-module
  failed_when: false
  changed_when: false
  register: _gitconfig

- name: Remove git config safe directories
  ansible.builtin.command: git config --global --unset-all safe.directory  # noqa command-instead-of-module
  changed_when: false
  when: _gitconfig.stdout != ""

- name: Add git repos to safe directories
  ansible.builtin.command: "git config --global --add safe.directory {{ item }}"  # noqa command-instead-of-module
  changed_when: false
  loop:
    - "{{ librenms_root }}"

- name: Clone librenms repository
  ansible.builtin.git:
    repo: "{{ librenms_repo_url }}"
    dest: "{{ librenms_root }}"
    version: "{{ librenms_release }}"
    force: true
  changed_when: false

- name: Fix librenms repository owner
  ansible.builtin.file:
    path: "{{ librenms_root }}"
    owner: "{{ librenms_user }}"
    group: "{{ librenms_group }}"
    mode: "0771"
    state: directory
  changed_when: false

- name: Set librenms subfolder permissions
  ansible.posix.acl:
    path: "{{ item }}"
    etype: group
    permissions: rwx
    default: true
    recursive: true
    state: present
  loop:
    - "{{ librenms_root }}/rrd"
    - "{{ librenms_root }}/logs"
    - "{{ librenms_root }}/bootstrap/cache/"
    - "{{ librenms_root }}/storage/"
  changed_when: false

- name: Manage librenms configuration
  ansible.builtin.template:
    src: config.php.j2
    dest: "{{ librenms_root }}/config.php"
    mode: "0750"
  vars:
    librenms_config_root: "{{ librenms_root }}"
    librenms_config_url: "{{ librenms_url }}"
    librenms_config_ldap_servers: "{{ librenms_ldap_servers }}"
    librenms_config_ldap_domain: "{{ librenms_ldap_domain }}"
    librenms_config_ldap_user: "{{ librenms_ldap_user }}"
    librenms_config_ldap_pass: "{{ librenms_ldap_pass }}"
    librenms_config_ldap_admingroup: "{{ librenms_ldap_admingroup }}"
    librenms_config_ldap_usergroup: "{{ librenms_ldap_usergroup }}"
    librenms_config_update_channel: "{{ librenms_update_channel }}"
    oxidized_backend_proto: "{{ librenms_oxidized_backend_proto }}"
    oxidized_backend_port: "{{ librenms_oxidized_backend_port }}"
  notify:
    - Restart fpm
    - Restart nginx

- name: Set librenms folder write permissions
  ansible.builtin.command: "chown -R {{ librenms_user }}:{{ librenms_group }} {{ librenms_root }}"
  tags: skip_ansible_lint
  changed_when: false

- name: Install librenms dependencies
  ansible.builtin.command: |
    {{ librenms_root }}/scripts/composer_wrapper.php install --no-dev
  args:
    creates: "{{ librenms_root }}/composer.phar"
  become_user: "{{ librenms_user }}"
  become: true
  notify: Restart fpm

- name: Stat librenms env file
  ansible.builtin.stat:
    path: "{{ librenms_root }}/.env"
  register: _librenms_env

- name: Manage librenms env file
  ansible.builtin.lineinfile:
    path: "{{ librenms_root }}/.env"
    regexp: '^#{{ item.key }}='
    line: "{{ item.key }}={{ item.value }}"
  when: _librenms_env.stat.exists
  loop:
    - key: "DB_HOST"
      value: "{{ librenms_db_host }}"
    - key: "DB_DATABASE"
      value: "{{ librenms_db_name }}"
    - key: "DB_USERNAME"
      value: "{{ librenms_db_user }}"
    - key: "DB_PASSWORD"
      value: "{{ librenms_db_pass }}"
  loop_control:
    label: "{{ item.key | lower }}"
  no_log: "{{ librenms_nolog }}"
  notify:
    - Restart fpm
    - Restart nginx

- name: Get list of current librenms tables
  ansible.builtin.command: "mysql -u{{ _user }} -p{{ _pass }} {{ _db }} -e 'SHOW TABLES'"
  vars:
    _user: "{{ librenms_db_user }}"
    _pass: "{{ librenms_db_pass }}"
    _db: "{{ librenms_db_name }}"
  register: _librenms_tables_list
  changed_when: false

- name: Create librenms database schema first run
  ansible.builtin.command: "{{ librenms_root }}/lnms migrate --no-interaction --force --seed"
  become_user: "{{ librenms_user }}"
  become: true
  when: _librenms_tables_list.stdout_lines | length == 0
  changed_when: false

- name: Run librenms daily
  ansible.builtin.command: "{{ librenms_root }}/daily.sh"
  become_user: "{{ librenms_user }}"
  become: true
  changed_when: false

- name: Get list of current librenms users
  ansible.builtin.command: "mysql -u{{ _user }} -p{{ _pass }} {{ _db }} -e 'SELECT username FROM users'"
  vars:
    _user: "{{ librenms_db_user }}"
    _pass: "{{ librenms_db_pass }}"
    _db: "{{ librenms_db_name }}"
  register: _librenms_user_list
  changed_when: false

- name: Create librenms admin user
  ansible.builtin.command: "{{ librenms_root }}/lnms user:add {{ _user }} -p {{ _pass }} -r admin -e {{ _email }}"
  vars:
    _user: "{{ librenms_admin_user }}"
    _pass: "{{ librenms_admin_pass }}"
    _email: "{{ librenms_admin_email }}"
  become_user: "{{ librenms_user }}"
  become: true
  when: "librenms_admin_user not in _librenms_user_list.stdout_lines"
  register: _librenms_add_admin_user_result
  changed_when: "'already exists' not in _librenms_add_admin_user_result.stdout"

- name: Cron job for cleaup database daily
  ansible.builtin.cron:
    name: cleanupDB
    job: "{{ librenms_root }}/daily.sh"
    special_time: daily
    user: "{{ librenms_user }}"

- name: Manage cronjob config
  ansible.builtin.copy:
    src: "{{ librenms_root }}/dist/librenms.cron"
    dest: /etc/cron.d/librenms
    remote_src: true
    group: root
    owner: root
    mode: "0644"
  notify: Restart cron

- name: Manage logrotate config
  ansible.builtin.copy:
    src: "{{ librenms_root }}/misc/librenms.logrotate"
    dest: /etc/logrotate.d/librenms
    remote_src: true
    group: root
    owner: root
    mode: "0644"

- name: Manage scheduler config
  ansible.builtin.copy:
    src: "{{ librenms_root }}/dist/{{ item }}"
    dest: /etc/systemd/system
    remote_src: true
    group: root
    owner: root
    mode: "0755"
  loop:
    - librenms-scheduler.service
    - librenms-scheduler.timer
  notify: Restart scheduler

- name: Create librenm directories
  ansible.builtin.file:
    path: "{{ librenms_backup_target }}"
    state: directory
    mode: "0755"

- name: Manage librenms backups
  when: librenms_backup_enable
  block:

    - name: Create librenms backup script
      ansible.builtin.template:
        src: librenms-backup.sh.j2
        dest: "{{ librenms_backup_bin }}"
        group: root
        owner: root
        mode: "0750"
      vars:
        backup_identifier: "{{ librenms_backup_identifier }}"
        backup_path: "{{ librenms_backup_target }}"
        backup_source: "{{ librenms_root }}/config.php {{ librenms_root }}/rrd {{ librenms_root }}/.env"
        mysql_user: "{{ librenms_db_user }}"
        mysql_pass: "{{ librenms_db_pass }}"
        mysql_db: "{{ librenms_db_name }}"
        retention_period: "{{ librenms_backup_retention_period }}"

    - name: Create librenms restore script
      ansible.builtin.template:
        src: librenms-restore.sh.j2
        dest: "{{ librenms_restore_bin }}"
        group: root
        owner: root
        mode: "0750"
      vars:
        backup_identifier: "{{ librenms_backup_identifier }}"
        backup_path: "{{ librenms_backup_target }}"
        mysql_user: "{{ librenms_db_user }}"
        mysql_pass: "{{ librenms_db_pass }}"
        mysql_db: "{{ librenms_db_name }}"

    - name: Manage librenms backup cronjob
      ansible.builtin.cron:
        name: librenms-conf-backup
        job: "{{ librenms_backup_bin }}"
        special_time: daily

    - name: Create librenms backup motd pointers
      ansible.builtin.copy:
        dest: /etc/update-motd.d/99-librenms
        content: |
          #!/usr/bin/env bash
          echo
          echo run librenms-backup to manually force librenms backup creation
          echo run librenms-restore to manually restore latest librenms backup
          echo
        mode: "0755"

- name: Flush_handlers
  ansible.builtin.meta: flush_handlers

- name: Run librenms validate
  ansible.builtin.command: "{{ librenms_root }}/validate.php"
  register: _validate_output
  become_user: "{{ librenms_user }}"
  become: true
  changed_when: false

- name: Validate librenms installation
  ansible.builtin.debug:
    var: _validate_output.stdout_lines
