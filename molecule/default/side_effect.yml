---
- name: server side effect

  hosts: server

  become: true

  tasks:

    - name: take librenms backup
      ansible.builtin.command: /usr/local/bin/librenms-backup
      register: _backup_script
      until: _backup_script is not failed
      retries: 5
      delay: 5

    - name: kill mysql connections
      ansible.builtin.command: |
        mysql -u {{ librenms_db_user }} -D {{ librenms_db_name }} -p{{ librenms_db_pass }}
        -e "select concat('KILL ',id,';') from information_schema.processlist"

    - name: drop librenms database
      ansible.builtin.command: |
        mysql -u {{ librenms_db_user }} -p{{ librenms_db_pass }}
        -e "drop database {{ librenms_db_name }};"

    - name: confirm database does not exist
      ansible.builtin.command: |
        mysql -u {{ librenms_db_user }} -p{{ librenms_db_pass }} \
        -e "show databases;"
      register: _database_output

    - name: debug librenms database output
      ansible.builtin.debug:
        var: _database_output.stdout_lines

    - name: verify librenms status after dropping database
      ansible.builtin.command: "{{ librenms_root }}/validate.php"
      become_user: "{{ librenms_user }}"
      failed_when: false
      register: _librenms_healthcheck_result

    - name: debug librenms healthcheck result
      ansible.builtin.debug:
        var: _librenms_healthcheck_result.stderr_lines

    - name: perform librenms restore
      ansible.builtin.command: /usr/local/bin/librenms-restore


- name: client side effect

  hosts: all

  become: true

  vars:

    side_effect_version: v2c
    side_effect_community: verify

  tasks:

    - name: set general facts
      block:

        - name: gather localhost facts
          ansible.builtin.setup:
          delegate_to: localhost
          delegate_facts: true

        - name: record localhost facts
          ansible.builtin.set_fact:
            librenms_server_hostname: "{{ hostvars['localhost']['ansible_default_ipv4']['address'] }}"
            librenms_client_hostname: "{{ hostvars['localhost']['ansible_default_ipv4']['address'] }}"

    - name: create librenms api token
      tags: client
      when: inventory_hostname in groups[server_group]
      block:

        - name: create api token
          ansible.builtin.command: "php {{ librenms_root }}/addtoken.php {{ librenms_admin_user }}"
          register: _api_cmd

        - name: register server token hash
          ansible.builtin.set_fact:
            librenms_api_token: "{{ api_out.token_hash }}"
          vars:
            api_out: "{{ _api_cmd.stdout }}"

    - name: register client token hash
      ansible.builtin.set_fact:
        librenms_api_token: "{{ librenms_api_tokens | select('!=', '') | first }}"
        librenms_url: "http://{{ librenms_server_hostname }}:8080"
      vars:
        librenms_api_tokens: "{{ groups[server_group] | map('extract', hostvars, 'librenms_api_token') }}"

    - name: set librenms device facts
      ansible.builtin.set_fact:
        librenms_devices:
          - hostname: localhost
            display: server
            version: "{{ librenms_client_snmp_version }}"
            community: "{{ side_effect_community }}"
      when: inventory_hostname in groups[server_group]
      tags: always

    - name: reconfigure client with custom v2 community
      ansible.builtin.include_role:
        name: wpnops.librenms
      vars:
        librenms_client_snmp_version: "{{ side_effect_version }}"
        librenms_client_snmp_community: "{{ side_effect_community }}"

    - meta: flush_handlers

  post_tasks:

    - name: post converge verification tasks
      tags: verify
      block:

        - name: verify local snmp daemon
          ansible.builtin.command: "snmpget -v {{ _version }} -c {{ _community  }} localhost .1.3.6.1.2.1.1"
          vars:
            _version: "{{ side_effect_version | regex_replace('^v', '') }}"
            _community: "{{ side_effect_community }}"
          when:
            - inventory_hostname not in groups[server_group]
            - _version != '3'

        - name: check librenms registration
          ansible.builtin.uri:
            url: "{{ librenms_url }}/api/v0/devices?type=all"
            headers:
              X-Auth-Token: "{{ librenms_api_token }}"
            return_content: yes
            validate_certs: no
          register: _librenms_devices

        - name: check librenms registration
          ansible.builtin.uri:
            url: "{{ librenms_url }}/api/v0/devices?type=all"
            headers:
              X-Auth-Token: "{{ librenms_api_token }}"
            return_content: yes
            validate_certs: no
          vars:
            attr_json: json
            attr_devices: devices
          register: _librenms_devices
          until:
            - attr_json in _librenms_devices
            - attr_devices in _librenms_devices[attr_json]
            - _librenms_devices[attr_json][attr_devices] | selectattr('display', 'equalto', inventory_hostname) | length > 0
          when: librenms_client_register | bool
          retries: 10
          delay: 60

        - name: verify device registrations
          when: inventory_hostname in groups[server_group]
          block:

            - name: query librenms registrations
              ansible.builtin.uri:
                url: "{{ librenms_url }}/api/v0/devices?type=all"
                headers:
                  X-Auth-Token: "{{ librenms_api_token }}"
                return_content: yes
                validate_certs: no
              register: _librenms_devices

            - debug:
                var: _librenms_devices

            - name: verify librenms device registration
              ansible.builtin.fail:
                msg: "devices [{{ ', '.join(_unregistered) }}] have not been registered to librenms"
              vars:
                _registrations: "{{ librenms_devices | map(attribute='display') | list }}"
                _registered: "{{ _librenms_devices.json.devices | map(attribute='display') | list }}"
                _unregistered: "{{ _registrations | difference(_registered) | list }}"
              when: _unregistered | length > 0
